    static void AStar(State initial) {
        PriorityQueue<Node> queue = new PriorityQueue<>(Comparator.comparingInt(n -> n.cost));
        Map<String, Integer> visited = new HashMap<>();
        Node initialNode = new Node(initial, null, 0, initial.manhattanDistance());
        queue.add(initialNode);
        visited.put(Arrays.deepToString(initial.board), 0);

        while (!queue.isEmpty()) {
            Node currentNode = queue.poll();
            State currentState = currentNode.state;
            if (currentState.isGoal()) {
                printSolution(currentNode, visited.size());
                return;
            }
            for (State nextState : currentState.getNextStates()) {
                String nextStateStr = Arrays.deepToString(nextState.board);
                int newCost = currentNode.depth + 1 + nextState.manhattanDistance();
                if (!visited.containsKey(nextStateStr) || newCost < visited.get(nextStateStr)) {
                    visited.put(nextStateStr, newCost);
                    Node nextNode = new Node(nextState, currentNode, currentNode.depth + 1, newCost);
                    queue.add(nextNode);
                }
            }
        }
    }